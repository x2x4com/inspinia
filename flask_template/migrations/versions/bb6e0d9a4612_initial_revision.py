"""initial revision

Revision ID: bb6e0d9a4612
Revises: None
Create Date: 2016-04-10 19:06:00.401957

"""

# revision identifiers, used by Alembic.
import datetime

revision = 'bb6e0d9a4612'
down_revision = None

import sqlalchemy as sa
from alembic import op

from flask_template import __maintainer__, __maintainer_email__


def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    roles = op.create_table('roles',
                            sa.Column('id', sa.Integer(), nullable=False),
                            sa.Column('name', sa.String(length=80), nullable=True),
                            sa.Column('description', sa.String(length=255), nullable=True),
                            sa.PrimaryKeyConstraint('id'),
                            sa.UniqueConstraint('name'))
    users = op.create_table('users',
                            sa.Column('id', sa.Integer(), nullable=False),
                            sa.Column('first_name', sa.String(length=255), nullable=True),
                            sa.Column('last_name', sa.String(length=255), nullable=True),
                            sa.Column('email', sa.String(length=255), nullable=True),
                            sa.Column('password', sa.String(length=255), nullable=True),
                            sa.Column('active', sa.Boolean(), nullable=True),
                            sa.Column('confirmed_at', sa.DateTime(), nullable=True),
                            sa.Column('registered_at', sa.DateTime(), nullable=True),
                            sa.Column('last_login_at', sa.DateTime(), nullable=True),
                            sa.Column('current_login_at', sa.DateTime(), nullable=True),
                            sa.Column('last_login_ip', sa.String(length=100), nullable=True),
                            sa.Column('current_login_ip', sa.String(length=100), nullable=True),
                            sa.Column('login_count', sa.Integer(), nullable=True),
                            sa.PrimaryKeyConstraint('id'),
                            sa.UniqueConstraint('email'))
    roles_users = op.create_table('roles_users',
                                  sa.Column('user_id', sa.Integer(), nullable=True),
                                  sa.Column('role_id', sa.Integer(), nullable=True),
                                  sa.ForeignKeyConstraint(['role_id'], [u'roles.id'], ),
                                  sa.ForeignKeyConstraint(['user_id'], [u'users.id'], ))
    ### end Alembic commands ###
    # Add roles to the db
    op.bulk_insert(roles, [{'name': 'user', 'description': 'User'},
                           {'name': 'admin', 'description': 'Administrator'},
                           {'name': 'superuser', 'description': 'Superuser'}])
    # Add maintainer user to the db
    op.bulk_insert(users, [{
        'first_name': __maintainer__.split()[0],
        'last_name': __maintainer__.split()[1],
        'email': __maintainer_email__,
        'active': True,
        'registered_at': datetime.datetime.now()
    }])
    # Give the maintainer all the roles
    op.bulk_insert(roles_users, [{'user_id': 1, 'role_id': 1},
                                 {'user_id': 1, 'role_id': 2},
                                 {'user_id': 1, 'role_id': 3}])


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('roles_users')
    op.drop_table('users')
    op.drop_table('roles')
    ### end Alembic commands ###
